name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install system dependencies
        run: |
          brew install ffmpeg
          
      - name: Install npm dependencies
        run: npm install
        
      - name: Download FFmpeg
        run: npm run download-ffmpeg
        
      - name: Run compatibility tests
        run: |
          npm run check-compatibility
          npm run test
        
      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Verify tag matches version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          PKG_VERSION=$(node -p "require('./package.json').version")
          EXPECTED_TAG="v$PKG_VERSION"
          
          if [ "$TAG_VERSION" != "$EXPECTED_TAG" ]; then
            echo "‚ùå Tag version ($TAG_VERSION) doesn't match package.json version (v$PKG_VERSION)"
            exit 1
          fi
          echo "‚úÖ Tag version matches package.json version"
          
      - name: Create Python virtual environment
        run: |
          # Create architecture-specific virtual environment
          if [ "${{ matrix.arch }}" = "x64" ]; then
            echo "Creating x64 virtual environment..."
            arch -x86_64 python3 -m venv venv-x64
            arch -x86_64 venv-x64/bin/pip install --upgrade pip
            arch -x86_64 venv-x64/bin/pip install -r api/requirements.txt
          else
            echo "Creating arm64 virtual environment..."
            python3 -m venv venv-arm64
            source venv-arm64/bin/activate
            pip install --upgrade pip
            pip install -r api/requirements.txt
          fi
          
      - name: Build Python backend
        env:
          MATRIX_ARCH: ${{ matrix.arch }}
        run: |
          # Use architecture-specific virtual environment
          if [ "${{ matrix.arch }}" = "x64" ]; then
            source venv-x64/bin/activate
            echo "Building Python bundle for x64 architecture"
          else
            source venv-arm64/bin/activate
            echo "Building Python bundle for arm64 architecture"
          fi
          
          # Set architecture-specific environment for PyInstaller
          if [ "${{ matrix.arch }}" = "x64" ]; then
            export ARCHFLAGS="-arch x86_64"
            export _PYTHON_HOST_PLATFORM="macosx-10.9-x86_64"
            echo "Building Python bundle for x64 architecture"
          else
            # For ARM64, use more universal settings for better M1/M2/M3 compatibility
            export ARCHFLAGS="-arch arm64"
            export _PYTHON_HOST_PLATFORM="macosx-11.0-arm64"
            export MACOSX_DEPLOYMENT_TARGET="11.0"
            echo "Building Python bundle for arm64 architecture (universal Apple Silicon)"
          fi
          npm run bundle-python
          
      - name: Build Electron app
        run: |
          npm run dist -- --mac --${{ matrix.arch }} --dir
          
      - name: Test build artifacts
        run: |
          npm run test-build
          
      - name: Create installer package
        run: |
          npm run create-installer
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/installer/*.pkg
          tag_name: v${{ steps.version.outputs.version }}
          name: ALL-DLP v${{ steps.version.outputs.version }}
          body: |
            ## üéµ ALL-DLP v${{ steps.version.outputs.version }}
            
            ### ‚ú® What's New
            - Professional installer package (no more "corrupted" app issues!)
            - Automatic compatibility fixes for Apple Silicon
            - Improved cross-architecture support
            - Enhanced user experience
            
            ### üîß Installation
            1. Download the installer package for your architecture
            2. Double-click to run the installer
            3. Follow the installation wizard
            4. Launch ALL-DLP from Applications
            
            ### üèóÔ∏è Architecture Support
            - **ARM64**: Apple Silicon (M1, M2, M3)
            - **x64**: Intel Macs
            
            ### üöÄ Features
            - Multi-platform music downloads
            - Legal purchase search
            - Automatic metadata extraction
            - Cross-architecture compatibility
            
            ### üìã System Requirements
            - macOS 10.15 (Catalina) or later
            - Intel (x86_64) or Apple Silicon (arm64) processor
            - Internet connection for downloads
            
            ### üîß Uninstallation
            Run: `sudo /Applications/ALL-DLP.app/Contents/Resources/uninstall.sh`
            
            ### ‚ö†Ô∏è Important
            This software is for personal, private use only. Respect copyright and support content creators.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: List build outputs
        run: |
          echo "Build outputs:"
          ls -la dist/
          
      - name: Upload DMG artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ALL-DLP-${{ matrix.arch }}-${{ steps.version.outputs.version }}
          path: |
            dist/ALL-DLP-*.dmg
            dist/*.dmg
          if-no-files-found: error 