name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install system dependencies
        run: |
          brew install ffmpeg
          
      - name: Install npm dependencies
        run: npm install
        
      - name: Download FFmpeg
        run: npm run download-ffmpeg
        
      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Verify tag matches version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          PKG_VERSION=$(node -p "require('./package.json').version")
          EXPECTED_TAG="v$PKG_VERSION"
          
          if [ "$TAG_VERSION" != "$EXPECTED_TAG" ]; then
            echo "❌ Tag version ($TAG_VERSION) doesn't match package.json version (v$PKG_VERSION)"
            exit 1
          fi
          echo "✅ Tag version matches package.json version"
          
      - name: Create Python virtual environment
        run: |
          # Create architecture-specific virtual environment
          if [ "${{ matrix.arch }}" = "x64" ]; then
            echo "Creating x64 virtual environment..."
            arch -x86_64 python3 -m venv venv-x64
            source venv-x64/bin/activate
            pip install --upgrade pip
            pip install -r api/requirements.txt
          else
            echo "Creating arm64 virtual environment..."
            python3 -m venv venv-arm64
            source venv-arm64/bin/activate
            pip install --upgrade pip
            pip install -r api/requirements.txt
          fi
          
      - name: Build Python backend
        env:
          MATRIX_ARCH: ${{ matrix.arch }}
        run: |
          # Use architecture-specific virtual environment
          if [ "${{ matrix.arch }}" = "x64" ]; then
            source venv-x64/bin/activate
            echo "Building Python bundle for x64 architecture"
          else
            source venv-arm64/bin/activate
            echo "Building Python bundle for arm64 architecture"
          fi
          
          # Set architecture-specific environment for PyInstaller
          if [ "${{ matrix.arch }}" = "x64" ]; then
            export ARCHFLAGS="-arch x86_64"
            export _PYTHON_HOST_PLATFORM="macosx-10.9-x86_64"
            echo "Building Python bundle for x64 architecture"
          else
            export ARCHFLAGS="-arch arm64"
            export _PYTHON_HOST_PLATFORM="macosx-11.0-arm64"
            echo "Building Python bundle for arm64 architecture"
          fi
          npm run bundle-python
          
      - name: Build and publish Electron app (DMG)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          npm run dist -- --mac --${{ matrix.arch }} --publish always
          
      - name: List build outputs
        run: |
          echo "Build outputs:"
          ls -la dist/
          
      - name: Upload DMG artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ALL-DLP-${{ matrix.arch }}-${{ steps.version.outputs.version }}
          path: |
            dist/ALL-DLP-*.dmg
            dist/*.dmg
          if-no-files-found: error 